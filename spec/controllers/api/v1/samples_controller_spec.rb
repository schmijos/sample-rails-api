require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::SamplesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Api::V1::Sample. As you add validations to Api::V1::Sample, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "gach", sample: 42 }
  }

  let(:invalid_attributes) {
    { gach: [] }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::SamplesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all api_v1_samples as @api_v1_samples" do
      sample = Sample.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:api_v1_samples)).to include(sample)
    end
  end

  describe "GET show" do
    it "assigns the requested api_v1 as @api_v1" do
      sample = Sample.create! valid_attributes
      get :show, {:id => sample.to_param}, valid_session
      expect(assigns(:api_v1_sample)).to eq(sample)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Api::V1::Sample" do
        expect {
          post :create, {sample: valid_attributes}, valid_session
        }.to change(Sample, :count).by(1)
      end

      it "assigns a newly created api_v1_sample as @api_v1_sample" do
        post :create, {sample: valid_attributes}, valid_session
        expect(assigns(:api_v1_sample)).to be_a(Sample)
        expect(assigns(:api_v1_sample)).to be_persisted
      end

      it "returns the location of the created api_v1_sample" do
        post :create, {sample: valid_attributes}, valid_session
        expect(response).to have_http_status(:created)
      end
    end

    describe "with invalid params" do
      it "returns an invalid params response" do
        post :create, {sample: invalid_attributes}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {'name' => 'newname', 'sample' => 1337}
      }

      it "updates the requested api_v1_sample" do
        sample = Sample.create! valid_attributes
        put :update, {id: sample.to_param, sample: new_attributes}, valid_session
        sample.reload
        expect(sample.attributes).to include(new_attributes)
      end

      it "assigns the requested api_v1_sample as @api_v1_sample" do
        sample = Sample.create! valid_attributes
        put :update, {id: sample.to_param, sample: valid_attributes}, valid_session
        expect(assigns(:api_v1_sample)).to eq(sample)
      end

      it "redirects to the api_v1_sample" do
        sample = Sample.create! valid_attributes
        put :update, {id: sample.to_param, sample: valid_attributes}, valid_session
        expect(response).to have_http_status(:no_content)
      end
    end

    describe "with invalid params" do
      it "assigns the api_v1 as @api_v1_sample" do
        sample = Sample.create! valid_attributes
        put :update, {id: sample.to_param, sample: invalid_attributes}, valid_session
        expect(assigns(:api_v1_sample)).to eq(sample)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested api_v1_sample" do
      sample = Sample.create! valid_attributes
      expect {
        delete :destroy, {:id => sample.to_param}, valid_session
      }.to change(Sample, :count).by(-1)
    end

    it "redirects to the api_v1_samples list" do
      sample = Sample.create! valid_attributes
      delete :destroy, {:id => sample.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
